import pytest

import hebrew_numbers


@pytest.mark.parametrize(
    ("n", "s"),
    [
        (0, "אפס"),
        (1, "אחת"),
        (2, "שתיים"),
        (3, "שלוש"),
        (10, "עשר"),
        (11, "אחת־עשרה"),
        (12, "שתיים־עשרה"),
        (13, "שלוש־עשרה"),
        (20, "עשרים"),
        (21, "עשרים ואחת"),
        (22, "עשרים ושתיים"),
        (23, "עשרים ושלוש"),
        (100, "מאה"),
        (101, "מאה ואחת"),
        (110, "מאה ועשר"),
        (111, "מאה ואחת־עשרה"),
        (122, "מאה עשרים ושתיים"),
        (200, "מאתיים"),
        (222, "מאתיים עשרים ושתיים"),
        (333, "שלוש מאות שלושים ושלוש"),
        (1000, "אלף"),
        (2000, "אלפיים"),
        (3000, "שלושת אלפים"),
        (3333, "שלושת אלפים שלוש מאות שלושים ושלוש"),
        (33333, "שלושים ושלושה אלף שלוש מאות שלושים ושלוש"),
        (333333, "שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלוש"),
        (1000000, "מיליון"),
        (3333333, "שלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלוש"),
        (
            33333333,
            "שלושים ושלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלוש",
        ),
        (1000000000, "מיליארד"),
        (
            3333333333,
            "שלושה מיליארד שלוש מאות "
            "שלושים ושלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלוש",
        ),
    ],
)
def test_cardinal_feminine(n: int, s: str):
    assert (
        hebrew_numbers.cardinal_number(
            n,
            hebrew_numbers.GrammaticalGender.FEMININE,
            hebrew_numbers.ConstructState.ABSOLUTE,
        )
        == s
    )


@pytest.mark.parametrize(
    ("n", "s"),
    [
        (0, "אפס"),
        (1, "אחד"),
        (2, "שניים"),
        (3, "שלושה"),
        (10, "עשרה"),
        (11, "אחד־עשר"),
        (12, "שניים־עשר"),
        (13, "שלושה־עשר"),
        (20, "עשרים"),
        (21, "עשרים ואחד"),
        (22, "עשרים ושניים"),
        (23, "עשרים ושלושה"),
        (100, "מאה"),
        (101, "מאה ואחד"),
        (110, "מאה ועשרה"),
        (111, "מאה ואחד־עשר"),
        (122, "מאה עשרים ושניים"),
        (200, "מאתיים"),
        (222, "מאתיים עשרים ושניים"),
        (333, "שלוש מאות שלושים ושלושה"),
        (1000, "אלף"),
        (2000, "אלפיים"),
        (3000, "שלושת אלפים"),
        (3333, "שלושת אלפים שלוש מאות שלושים ושלושה"),
        (33333, "שלושים ושלושה אלף שלוש מאות שלושים ושלושה"),
        (333333, "שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלושה"),
        (1000000, "מיליון"),
        (3333333, "שלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלושה"),
        (
            33333333,
            "שלושים ושלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלושה",
        ),
        (1000000000, "מיליארד"),
        (
            3333333333,
            "שלושה מיליארד שלוש מאות "
            "שלושים ושלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלושה",
        ),
    ],
)
def test_cardinal_masculine(n: int, s: str):
    assert (
        hebrew_numbers.cardinal_number(
            n,
            hebrew_numbers.GrammaticalGender.MASCULINE,
            hebrew_numbers.ConstructState.ABSOLUTE,
        )
        == s
    )


@pytest.mark.parametrize(
    ("n", "s"),
    [
        (1, "אחת"),
        (2, "שתי"),
        (3, "שלוש"),
        (10, "עשר"),
        (11, "אחת־עשרה"),
        (12, "שתיים־עשרה"),
        (13, "שלוש־עשרה"),
        (20, "עשרים"),
        (21, "עשרים ואחת"),
        (22, "עשרים ושתיים"),
        (23, "עשרים ושלוש"),
        (100, "מאה"),
        (101, "מאה ואחת"),
        (110, "מאה ועשר"),
        (111, "מאה ואחת־עשרה"),
        (122, "מאה עשרים ושתיים"),
        (200, "מאתיים"),
        (222, "מאתיים עשרים ושתיים"),
        (333, "שלוש מאות שלושים ושלוש"),
        (1000, "אלף"),
        (2000, "אלפיים"),
        (3000, "שלושת אלפים"),
        (3333, "שלושת אלפים שלוש מאות שלושים ושלוש"),
        (33333, "שלושים ושלושה אלף שלוש מאות שלושים ושלוש"),
        (333333, "שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלוש"),
        (1000000, "מיליון"),
        (3333333, "שלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלוש"),
        (
            33333333,
            "שלושים ושלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלוש",
        ),
        (1000000000, "מיליארד"),
        (
            3333333333,
            "שלושה מיליארד שלוש מאות "
            "שלושים ושלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלוש",
        ),
    ],
)
def test_cardinal_feminine_construct(n: int, s: str):
    assert (
        hebrew_numbers.cardinal_number(
            n,
            hebrew_numbers.GrammaticalGender.FEMININE,
            hebrew_numbers.ConstructState.CONSTRUCT,
        )
        == s
    )


@pytest.mark.parametrize(
    ("n", "s"),
    [
        (1, "אחד"),
        (2, "שני"),
        (3, "שלושת"),
        (10, "עשרת"),
        (11, "אחד־עשר"),
        (12, "שניים־עשר"),
        (13, "שלושה־עשר"),
        (20, "עשרים"),
        (21, "עשרים ואחד"),
        (22, "עשרים ושניים"),
        (23, "עשרים ושלושה"),
        (100, "מאה"),
        (101, "מאה ואחד"),
        (110, "מאה ועשרה"),
        (111, "מאה ואחד־עשר"),
        (122, "מאה עשרים ושניים"),
        (200, "מאתיים"),
        (222, "מאתיים עשרים ושניים"),
        (333, "שלוש מאות שלושים ושלושה"),
        (1000, "אלף"),
        (2000, "אלפיים"),
        (3000, "שלושת אלפים"),
        (3333, "שלושת אלפים שלוש מאות שלושים ושלושה"),
        (33333, "שלושים ושלושה אלף שלוש מאות שלושים ושלושה"),
        (333333, "שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלושה"),
        (1000000, "מיליון"),
        (3333333, "שלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלושה"),
        (
            33333333,
            "שלושים ושלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלושה",
        ),
        (1000000000, "מיליארד"),
        (
            3333333333,
            "שלושה מיליארד שלוש מאות "
            "שלושים ושלושה מיליון שלוש מאות שלושים ושלושה אלף שלוש מאות שלושים ושלושה",
        ),
    ],
)
def test_cardinal_masculine_construct(n: int, s: str):
    assert (
        hebrew_numbers.cardinal_number(
            n,
            hebrew_numbers.GrammaticalGender.MASCULINE,
            hebrew_numbers.ConstructState.CONSTRUCT,
        )
        == s
    )


@pytest.mark.parametrize(
    ("n", "s"),
    [
        (0, "אפס"),
        (-1, "מינוס אחת"),
        (1, "אחת"),
        (2, "שתיים"),
        (3, "שלוש"),
        (10, "עשר"),
        (100, "מאה"),
        (1000, "אלף"),
        (1000000, "מיליון"),
        (1000000000, "מיליארד"),
        (1000000000000, "טריליון"),
        (-1000000000000, "מינוס טריליון"),
    ],
)
def test_indefinite_number(n: int, s: str):
    assert hebrew_numbers.indefinite_number(n) == s


@pytest.mark.parametrize(
    ("n", "s"),
    [
        (1, "ראשונה"),
        (2, "שנייה"),
        (3, "שלישית"),
        (10, "עשירית"),
        (11, "אחת־עשרה"),
        (12, "שתיים־עשרה"),
        (13, "שלוש־עשרה"),
        (20, "עשרים"),
    ],
)
def test_ordinal_number_feminine(n: int, s: str):
    assert (
        hebrew_numbers.ordinal_number(n, hebrew_numbers.GrammaticalGender.FEMININE) == s
    )


@pytest.mark.parametrize(
    ("n", "s"),
    [
        (1, "ראשון"),
        (2, "שני"),
        (3, "שלישי"),
        (10, "עשירי"),
        (11, "אחד־עשר"),
        (12, "שניים־עשר"),
        (13, "שלושה־עשר"),
        (20, "עשרים"),
    ],
)
def test_ordinal_number_masculine(n: int, s: str):
    assert (
        hebrew_numbers.ordinal_number(n, hebrew_numbers.GrammaticalGender.MASCULINE)
        == s
    )
